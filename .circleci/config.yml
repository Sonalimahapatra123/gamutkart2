#version: 2.1 # use CircleCI 2.0
orbs:
  aws-cli: circleci/aws-cli@0.1.2
  aws-ecr: circleci/aws-ecr@6.10.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    
    working_directory: ~/circleci-demo-java-spring # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}
      
      - run: mvn dependency:go-offline # gets the project dependencies
      
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}
      
      - run: mvn package # run the actual testsi
  deploy:  
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-secret-access-key: "$AWS_SECRET_ACCESS_KEY"
          aws-region: "$AWS_REGION"
      - run:
          name: build and push image
          command: |
             docker --version
             aws ecr get-login --region $AWS_REGION --no-include-email
             docker build -t terraform .
             docker tag terraform:latest 202771655335.dkr.ecr.us-east-1.amazonaws.com/terraform:latest
             #docker push 202771655335.dkr.ecr.us-east-1.amazonaws.com/terraform:latest
  push-image:
    description: Push a container image to the Amazon ECR registry
    parameters:
      account-url:
        default: 202771655335.dkr.ecr.us-east-1.amazonaws.com/terraform:latest
        #description: |
          #Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
        #type: env_var_name
      repo:
        description: Name of an Amazon ECR repository
        type: string
      tag:
        default: latest
        description: A comma-separated string containing docker image tags (default
          = latest)
        type: string
    steps:
    - run:
        command: |
          IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"
          for tag in "${DOCKER_TAGS[@]}"; do
            docker push $<<parameters.account-url>>/<<parameters.repo>>:${tag}
          done
        name: Push image to Amazon ECR       
workflows:
        build_and_push_image:
          jobs:
          - aws-ecr/build-and-push-image:
              account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
              aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
              aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
              context: myContext
              create-repo: true
              dockerfile: myDockerfile
              no-output-timeout: 20m
              path: pathToMyDockerfile
              profile-name: myProfileName
              region: AWS_REGION_ENV_VAR_NAME
              repo: terraform
              tag: latest,terraform
executors:
  default:
    description: |
      CircleCI's Ubuntu-based machine executor VM: https://circleci.com/docs/2.0/executor-types/#using-machine
    machine:
      docker_layer_caching: <<parameters.use-docker-layer-caching>>
      image: <<parameters.image>>
    parameters:
      image:
        default: ubuntu-1604:201903-01
        type: string
      use-docker-layer-caching:
        default: false
        type: boolean
#workflows:
 # build-and-deploy:
  #  jobs:
   #   - build
    #  - deploy
jobs:
  build-and-push-image:
    description: |
      Install AWS CLI, if needed, and configure. Log into Amazon ECR and push image to repository. Requires environment variables for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in Contexts (https://circleci.com/docs/2.0/contexts).
    executor: <<parameters.executor>>
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        description: |
          Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
        type: env_var_name
      attach-workspace:
        default: false
        description: |
          Boolean for whether or not to attach to an existing workspace. Default is false.
        type: boolean
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        description: |
          AWS access key id for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_ACCESS_KEY_ID.
        type: env_var_name
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        description: |
          AWS secret key for IAM role. Set this to the name of the environment variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
        type: env_var_name
      checkout:
        default: true
        description: |
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
      create-repo:
        default: false
        description: Should the repo be created if it does not exist?
        type: boolean
      dockerfile:
        default: Dockerfile
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
      executor:
        default: default
        description: executor to use for this job
        type: executor
      extra-build-args:
        default: ""
        description: |
          Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/build
        type: string
      no-output-timeout:
        default: 10m
        description: |
          The amount of time to allow the docker build command to run before timing out. Defaults to '10m'
        type: string
      path:
        default: .
        description: Path to the directory containing your Dockerfile and build context.
          Defaults to . (working directory).
        type: string
      profile-name:
        default: default
        description: AWS profile name to be configured.
        type: string
      region:
        default: AWS_REGION
        description: |
          Name of env var storing your AWS region information, defaults to AWS_REGION
        type: env_var_name
      repo:
        description: Name of an Amazon ECR repository
        type: string
      setup-remote-docker:
        default: false
        description: |
          Setup and use CircleCI's remote Docker environment for Docker and docker-compose commands? Not required if using the default executor
        type: boolean
      tag:
        default: latest
        description: A comma-separated string containing docker image tags to build
          and push (default = latest)
        type: string
      workspace-root:
        default: .
        description: |
          Workspace root path that is either an absolute path or a path relative to the working directory. Defaults to '.' (the working directory)
        type: string
    steps:
    - build-and-push-image:
        account-url: <<parameters.account-url>>
        attach-workspace: <<parameters.attach-workspace>>
        aws-access-key-id: <<parameters.aws-access-key-id>>
        aws-secret-access-key: <<parameters.aws-secret-access-key>>
        checkout: <<parameters.checkout>>
        create-repo: <<parameters.create-repo>>
        dockerfile: <<parameters.dockerfile>>
        extra-build-args: <<parameters.extra-build-args>>
        no-output-timeout: <<parameters.no-output-timeout>>
        path: <<parameters.path>>
        profile-name: <<parameters.profile-name>>
        region: <<parameters.region>>
        repo: <<parameters.repo>>
        setup-remote-docker: <<parameters.setup-remote-docker>>
        tag: <<parameters.tag>>
        workspace-root: <<parameters.workspace-root>>
orbs:
  aws-cli: circleci/aws-cli@1.2
version: 2.1
